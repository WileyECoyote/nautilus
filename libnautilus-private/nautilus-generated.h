/*
 * Generated by gdbus-codegen 2.32.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __NAUTILUS_GENERATED_H__
#define __NAUTILUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for apps.Nautilus.FileOperations */

#define NAUTILUS_DBUS_TYPE_FILE_OPERATIONS (nautilus_dbus_file_operations_get_type ())
#define NAUTILUS_DBUS_FILE_OPERATIONS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS, NautilusDBusFileOperations))
#define NAUTILUS_DBUS_IS_FILE_OPERATIONS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS))
#define NAUTILUS_DBUS_FILE_OPERATIONS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS, NautilusDBusFileOperationsIface))

struct _NautilusDBusFileOperations;
typedef struct _NautilusDBusFileOperations NautilusDBusFileOperations;
typedef struct _NautilusDBusFileOperationsIface NautilusDBusFileOperationsIface;

struct _NautilusDBusFileOperationsIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_copy_file) (
    NautilusDBusFileOperations *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_SourceFileURI,
    const gchar *arg_SourceDisplayName,
    const gchar *arg_DestinationDirectoryURI,
    const gchar *arg_DestinationDisplayName);

  gboolean (*handle_copy_uris) (
    NautilusDBusFileOperations *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_SourceFilesURIList,
    const gchar *arg_DestinationDirectoryURI);

  gboolean (*handle_empty_trash) (
    NautilusDBusFileOperations *object,
    GDBusMethodInvocation *invocation);

};

GType nautilus_dbus_file_operations_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nautilus_dbus_file_operations_interface_info (void);
guint nautilus_dbus_file_operations_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nautilus_dbus_file_operations_complete_copy_uris (
    NautilusDBusFileOperations *object,
    GDBusMethodInvocation *invocation);

void nautilus_dbus_file_operations_complete_empty_trash (
    NautilusDBusFileOperations *object,
    GDBusMethodInvocation *invocation);

void nautilus_dbus_file_operations_complete_copy_file (
    NautilusDBusFileOperations *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void nautilus_dbus_file_operations_call_copy_uris (
    NautilusDBusFileOperations *proxy,
    const gchar *const *arg_SourceFilesURIList,
    const gchar *arg_DestinationDirectoryURI,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nautilus_dbus_file_operations_call_copy_uris_finish (
    NautilusDBusFileOperations *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nautilus_dbus_file_operations_call_copy_uris_sync (
    NautilusDBusFileOperations *proxy,
    const gchar *const *arg_SourceFilesURIList,
    const gchar *arg_DestinationDirectoryURI,
    GCancellable *cancellable,
    GError **error);

void nautilus_dbus_file_operations_call_empty_trash (
    NautilusDBusFileOperations *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nautilus_dbus_file_operations_call_empty_trash_finish (
    NautilusDBusFileOperations *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nautilus_dbus_file_operations_call_empty_trash_sync (
    NautilusDBusFileOperations *proxy,
    GCancellable *cancellable,
    GError **error);

void nautilus_dbus_file_operations_call_copy_file (
    NautilusDBusFileOperations *proxy,
    const gchar *arg_SourceFileURI,
    const gchar *arg_SourceDisplayName,
    const gchar *arg_DestinationDirectoryURI,
    const gchar *arg_DestinationDisplayName,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nautilus_dbus_file_operations_call_copy_file_finish (
    NautilusDBusFileOperations *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nautilus_dbus_file_operations_call_copy_file_sync (
    NautilusDBusFileOperations *proxy,
    const gchar *arg_SourceFileURI,
    const gchar *arg_SourceDisplayName,
    const gchar *arg_DestinationDirectoryURI,
    const gchar *arg_DestinationDisplayName,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_PROXY (nautilus_dbus_file_operations_proxy_get_type ())
#define NAUTILUS_DBUS_FILE_OPERATIONS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_PROXY, NautilusDBusFileOperationsProxy))
#define NAUTILUS_DBUS_FILE_OPERATIONS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_PROXY, NautilusDBusFileOperationsProxyClass))
#define NAUTILUS_DBUS_FILE_OPERATIONS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_PROXY, NautilusDBusFileOperationsProxyClass))
#define NAUTILUS_DBUS_IS_FILE_OPERATIONS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_PROXY))
#define NAUTILUS_DBUS_IS_FILE_OPERATIONS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_PROXY))

typedef struct _NautilusDBusFileOperationsProxy NautilusDBusFileOperationsProxy;
typedef struct _NautilusDBusFileOperationsProxyClass NautilusDBusFileOperationsProxyClass;
typedef struct _NautilusDBusFileOperationsProxyPrivate NautilusDBusFileOperationsProxyPrivate;

struct _NautilusDBusFileOperationsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NautilusDBusFileOperationsProxyPrivate *priv;
};

struct _NautilusDBusFileOperationsProxyClass
{
  GDBusProxyClass parent_class;
};

GType nautilus_dbus_file_operations_proxy_get_type (void) G_GNUC_CONST;

void nautilus_dbus_file_operations_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NautilusDBusFileOperations *nautilus_dbus_file_operations_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NautilusDBusFileOperations *nautilus_dbus_file_operations_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nautilus_dbus_file_operations_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NautilusDBusFileOperations *nautilus_dbus_file_operations_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NautilusDBusFileOperations *nautilus_dbus_file_operations_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_SKELETON (nautilus_dbus_file_operations_skeleton_get_type ())
#define NAUTILUS_DBUS_FILE_OPERATIONS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_SKELETON, NautilusDBusFileOperationsSkeleton))
#define NAUTILUS_DBUS_FILE_OPERATIONS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_SKELETON, NautilusDBusFileOperationsSkeletonClass))
#define NAUTILUS_DBUS_FILE_OPERATIONS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_SKELETON, NautilusDBusFileOperationsSkeletonClass))
#define NAUTILUS_DBUS_IS_FILE_OPERATIONS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_SKELETON))
#define NAUTILUS_DBUS_IS_FILE_OPERATIONS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NAUTILUS_DBUS_TYPE_FILE_OPERATIONS_SKELETON))

typedef struct _NautilusDBusFileOperationsSkeleton NautilusDBusFileOperationsSkeleton;
typedef struct _NautilusDBusFileOperationsSkeletonClass NautilusDBusFileOperationsSkeletonClass;
typedef struct _NautilusDBusFileOperationsSkeletonPrivate NautilusDBusFileOperationsSkeletonPrivate;

struct _NautilusDBusFileOperationsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NautilusDBusFileOperationsSkeletonPrivate *priv;
};

struct _NautilusDBusFileOperationsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nautilus_dbus_file_operations_skeleton_get_type (void) G_GNUC_CONST;

NautilusDBusFileOperations *nautilus_dbus_file_operations_skeleton_new (void);


/* ---- */

#define NAUTILUS_DBUS_TYPE_OBJECT (nautilus_dbus_object_get_type ())
#define NAUTILUS_DBUS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_DBUS_TYPE_OBJECT, NautilusDBusObject))
#define NAUTILUS_DBUS_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NAUTILUS_DBUS_TYPE_OBJECT))
#define NAUTILUS_DBUS_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NAUTILUS_DBUS_TYPE_OBJECT, NautilusDBusObject))

struct _NautilusDBusObject;
typedef struct _NautilusDBusObject NautilusDBusObject;
typedef struct _NautilusDBusObjectIface NautilusDBusObjectIface;

struct _NautilusDBusObjectIface
{
  GTypeInterface parent_iface;
};

GType nautilus_dbus_object_get_type (void) G_GNUC_CONST;

NautilusDBusFileOperations *nautilus_dbus_object_get_file_operations (NautilusDBusObject *object);
NautilusDBusFileOperations *nautilus_dbus_object_peek_file_operations (NautilusDBusObject *object);

#define NAUTILUS_DBUS_TYPE_OBJECT_PROXY (nautilus_dbus_object_proxy_get_type ())
#define NAUTILUS_DBUS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_DBUS_TYPE_OBJECT_PROXY, NautilusDBusObjectProxy))
#define NAUTILUS_DBUS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NAUTILUS_DBUS_TYPE_OBJECT_PROXY, NautilusDBusObjectProxyClass))
#define NAUTILUS_DBUS_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NAUTILUS_DBUS_TYPE_OBJECT_PROXY, NautilusDBusObjectProxyClass))
#define NAUTILUS_DBUS_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NAUTILUS_DBUS_TYPE_OBJECT_PROXY))
#define NAUTILUS_DBUS_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NAUTILUS_DBUS_TYPE_OBJECT_PROXY))

typedef struct _NautilusDBusObjectProxy NautilusDBusObjectProxy;
typedef struct _NautilusDBusObjectProxyClass NautilusDBusObjectProxyClass;
typedef struct _NautilusDBusObjectProxyPrivate NautilusDBusObjectProxyPrivate;

struct _NautilusDBusObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  NautilusDBusObjectProxyPrivate *priv;
};

struct _NautilusDBusObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType nautilus_dbus_object_proxy_get_type (void) G_GNUC_CONST;
NautilusDBusObjectProxy *nautilus_dbus_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define NAUTILUS_DBUS_TYPE_OBJECT_SKELETON (nautilus_dbus_object_skeleton_get_type ())
#define NAUTILUS_DBUS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_DBUS_TYPE_OBJECT_SKELETON, NautilusDBusObjectSkeleton))
#define NAUTILUS_DBUS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NAUTILUS_DBUS_TYPE_OBJECT_SKELETON, NautilusDBusObjectSkeletonClass))
#define NAUTILUS_DBUS_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NAUTILUS_DBUS_TYPE_OBJECT_SKELETON, NautilusDBusObjectSkeletonClass))
#define NAUTILUS_DBUS_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NAUTILUS_DBUS_TYPE_OBJECT_SKELETON))
#define NAUTILUS_DBUS_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NAUTILUS_DBUS_TYPE_OBJECT_SKELETON))

typedef struct _NautilusDBusObjectSkeleton NautilusDBusObjectSkeleton;
typedef struct _NautilusDBusObjectSkeletonClass NautilusDBusObjectSkeletonClass;
typedef struct _NautilusDBusObjectSkeletonPrivate NautilusDBusObjectSkeletonPrivate;

struct _NautilusDBusObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  NautilusDBusObjectSkeletonPrivate *priv;
};

struct _NautilusDBusObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType nautilus_dbus_object_skeleton_get_type (void) G_GNUC_CONST;
NautilusDBusObjectSkeleton *nautilus_dbus_object_skeleton_new (const gchar *object_path);
void nautilus_dbus_object_skeleton_set_file_operations (NautilusDBusObjectSkeleton *object, NautilusDBusFileOperations *interface_);

/* ---- */

#define NAUTILUS_DBUS_TYPE_OBJECT_MANAGER_CLIENT (nautilus_dbus_object_manager_client_get_type ())
#define NAUTILUS_DBUS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NAUTILUS_DBUS_TYPE_OBJECT_MANAGER_CLIENT, NautilusDBusObjectManagerClient))
#define NAUTILUS_DBUS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NAUTILUS_DBUS_TYPE_OBJECT_MANAGER_CLIENT, NautilusDBusObjectManagerClientClass))
#define NAUTILUS_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NAUTILUS_DBUS_TYPE_OBJECT_MANAGER_CLIENT, NautilusDBusObjectManagerClientClass))
#define NAUTILUS_DBUS_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NAUTILUS_DBUS_TYPE_OBJECT_MANAGER_CLIENT))
#define NAUTILUS_DBUS_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NAUTILUS_DBUS_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _NautilusDBusObjectManagerClient NautilusDBusObjectManagerClient;
typedef struct _NautilusDBusObjectManagerClientClass NautilusDBusObjectManagerClientClass;
typedef struct _NautilusDBusObjectManagerClientPrivate NautilusDBusObjectManagerClientPrivate;

struct _NautilusDBusObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  NautilusDBusObjectManagerClientPrivate *priv;
};

struct _NautilusDBusObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType nautilus_dbus_object_manager_client_get_type (void) G_GNUC_CONST;

GType nautilus_dbus_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void nautilus_dbus_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *nautilus_dbus_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *nautilus_dbus_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void nautilus_dbus_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *nautilus_dbus_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *nautilus_dbus_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __NAUTILUS_GENERATED_H__ */
